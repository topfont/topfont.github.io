{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Topfont","props","text","split","map","x","i","style","fontFamily","topfont","FontCard","onClick","width","height","display","alignItems","justifyContent","fontSize","borderRadius","background","boxShadow","margin","border","color","font","letter","alphabet","getRandomLetter","Math","random","length","fonts","getRandomFontPair","a","b","App","useState","window","localStorage","getItem","answeredQuestions","setAnsweredQuestions","currentLetter","setCurrentLetter","isLoading","setIsLoading","showTopfont","setShowTopfont","votes","setVotes","currentFontPair","setCurrentFontPair","vote","old","value","setItem","fetch","method","headers","body","JSON","stringify","entries","entry","Object","sort","undefined","fromEntries","className","padding","fontWeight","opacity","paddingLeft","paddingRight","paddingTop","paddingBottom","marginBottom","href","e","preventDefault","response","json","marginTop","lineHeight","textAlign","fontVariantNumeric","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccf59615.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst Topfont: React.FC<{ text: string; topfont: any }> = (props) => (\n  <>\n    {props.text.split(\"\").map((x, i) => (\n      <span key={i} style={{ fontFamily: props.topfont[x] }}>\n        {x}\n      </span>\n    ))}\n  </>\n);\n\nconst FontCard: React.FC<{\n  letter: string;\n  font: string;\n  onClick: () => void;\n}> = (props) => {\n  return (\n    <button\n      onClick={props.onClick}\n      style={{\n        width: 128,\n        height: 128,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontSize: 64,\n        borderRadius: 8,\n        background: \"white\",\n        boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.06)\",\n        margin: 8,\n        border: 0,\n        color: \"#502824\",\n        fontFamily: props.font,\n      }}\n    >\n      {props.letter}\n    </button>\n  );\n};\n\nconst alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nfunction getRandomLetter() {\n  return alphabet[(Math.random() * alphabet.length) | 0];\n}\n\nconst fonts: string[] = [\n  \"Arial\",\n  \"Verdana\",\n  \"Helvetica\",\n  \"Tahoma\",\n  \"Trebuchet MS\",\n  \"Times New Roman\",\n  \"Georgia\",\n  \"Garamond\",\n  \"Courier New\",\n  \"Brush Script MT\",\n];\nfunction getRandomFontPair() {\n  const a = (Math.random() * fonts.length) | 0;\n  let b = a;\n  while (b === a) {\n    b = (Math.random() * fonts.length) | 0;\n  }\n  return [fonts[a], fonts[b]];\n}\n\nfunction App() {\n  const [answeredQuestions, setAnsweredQuestions] = useState(\n    +(window.localStorage.getItem(\"voteCount\") || 0) || 0\n  );\n  const [currentLetter, setCurrentLetter] = useState(getRandomLetter());\n  const [isLoading, setIsLoading] = useState(false);\n  const [showTopfont, setShowTopfont] = useState(false);\n  const [votes, setVotes] = useState<any>(null);\n  const [currentFontPair, setCurrentFontPair] = useState(getRandomFontPair());\n\n  const vote = async (letter: string, font: string) => {\n    setIsLoading(true);\n    setAnsweredQuestions((old) => {\n      const value = old + 1;\n      window.localStorage.setItem(\"voteCount\", \"\" + value);\n      return value;\n    });\n    try {\n      await fetch(\"https://topfont.arkt.is/vote/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          letter,\n          font,\n        }),\n      });\n    } catch {\n    } finally {\n      setIsLoading(false);\n      setCurrentLetter(getRandomLetter());\n      setCurrentFontPair(getRandomFontPair());\n    }\n  };\n\n  let topfont = null;\n  if (votes && votes !== \"loading\") {\n    const entries = alphabet.split(\"\").map((x) => [x, votes[x] || {}]);\n    for (const entry of entries) {\n      //@ts-expect-error\n      const font = Object.entries(entry[1]).sort((a, b) => a[1] - b[1])[0];\n      entry[1] = font ? font[0] : undefined;\n    }\n    topfont = Object.fromEntries(entries);\n  }\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          fontSize: 22,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: \"white\",\n          background: \"#502824\",\n          padding: 16,\n        }}\n      >\n        <span style={{ fontWeight: \"bold\" }}>topfont</span>\n        <span style={{ opacity: 0.5 }}>.github.io</span>\n      </div>\n      <div\n        style={{\n          paddingLeft: 32,\n          paddingRight: 32,\n          paddingTop: 16,\n          paddingBottom: 16,\n        }}\n      >\n        <p style={{ marginBottom: 32 }}>\n          Topfont is a community-sourced project to find the best combination\n          font, the <b>Topfont</b>. It works pitting glyphs from various fonts\n          against eachother 1-on-1, and synthesises a whole new font that uses\n          the most popular glyphs from all fonts for each letter.\n        </p>\n\n        <p>\n          {!showTopfont ? (\n            <a\n              href=\"/topfont\"\n              onClick={async (e) => {\n                e.preventDefault();\n                setShowTopfont(true);\n                setVotes(\"loading\");\n                try {\n                  const response = await fetch(\"https://topfont.arkt.is/\");\n                  const votes = await response.json();\n                  setVotes(votes);\n                } catch {\n                  setVotes(null);\n                  setShowTopfont(false);\n                }\n              }}\n            >\n              View the Topfont in all it's glory.\n            </a>\n          ) : (\n            <a\n              href=\"/\"\n              onClick={(e) => {\n                e.preventDefault();\n                setShowTopfont(false);\n              }}\n            >\n              Continue voting for glyphs.\n            </a>\n          )}\n        </p>\n        {showTopfont ? (\n          <div\n            style={{\n              marginTop: 32,\n              fontSize: 24,\n              background: \"white\",\n              paddingTop: 1,\n              paddingBottom: 1,\n              paddingLeft: 32,\n              paddingRight: 32,\n              lineHeight: 1.25,\n              borderRadius: 8,\n            }}\n          >\n            {votes === \"loading\" ? (\n              \"Loading\"\n            ) : (\n              <div>\n                <p>\n                  <Topfont\n                    text=\"Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz\"\n                    topfont={topfont}\n                  />\n                </p>\n                <p>\n                  <Topfont\n                    text=\"The quick brown fox jumps over the lazy dog.\"\n                    topfont={topfont}\n                  />\n                </p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <>\n            <div\n              style={{\n                fontWeight: \"bold\",\n                fontSize: 22,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                marginBottom: 32,\n                marginTop: 64,\n                color: \"#502824\",\n              }}\n            >\n              Which looks nicer?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                height: 128,\n              }}\n            >\n              {!isLoading && (\n                <>\n                  <FontCard\n                    letter={currentLetter}\n                    font={currentFontPair[0]}\n                    onClick={() => {\n                      vote(currentLetter, currentFontPair[0]);\n                    }}\n                  />\n                  <FontCard\n                    letter={currentLetter}\n                    font={currentFontPair[1]}\n                    onClick={() => {\n                      vote(currentLetter, currentFontPair[1]);\n                    }}\n                  />\n                </>\n              )}\n            </div>\n\n            {answeredQuestions > 0 && (\n              <div style={{ marginTop: 32, textAlign: \"center\" }}>\n                You have voted on{\" \"}\n                <span style={{ fontVariantNumeric: \"tabular-nums\" }}>\n                  {answeredQuestions}\n                </span>{\" \"}\n                fonts. {answeredQuestions > 20 && \" Nice!\"}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}